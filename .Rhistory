data=api.grp[,c("CDS","API","year")] )
api.grp.lm <- api.grp.lm[!(is.na(api.grp.lm[,3])),]
dim(api.grp.lm)
dim(api.grp)
api.grp <- groupedData( API ~ year | CDS,
data=api.districts )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS","API","year")] )
api.grp.lm <- lapply( api.grp.lm, function(x){
!(is.na(x[,3]))
})
api.grp.lm[[1]]
api.grp.lm[[1]][,2]
api.grp.lm[[1]][2]
api.grp.lm[[1]]$coefficients
api.grp.lm[[1]]$coefficients[2]
api.grp <- groupedData( API ~ year | CDS,
data=api.districts )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS","API","year")] )
api.grp.lm <- lapply( api.grp.lm, function(x){
!(is.na(x$coefficients[2]))
})
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#county names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
api.grp.lm
table(table(api$CDS))
table(table(api.districts$CDS))
table(api.districts$CDS)
table(api.districts$CDS)==1
?split
api.districts.2 <- unlist( lapply( split(api.districts, api.districts$CDS),
function(x){
ifelse( dim(x)[1]==1, NULL, x)
}) )
api.districts.2 <- unlist( lapply( split(api.districts, api.districts$CDS),
function(x){
ifelse( dim(x)[1]==1, rep(NA, dim(x)[2]) , x)
}) )
api.grp <- groupedData( API ~ year | CDS,
data=api.districts2 )
api.districts.2 <- unlist( lapply( split(api.districts, api.districts$CDS),
function(x){
ifelse( dim(x)[1]==1, rep(NA, dim(x)[2]) , x)
}) )
api.grp <- groupedData( API ~ year | CDS,
data=api.districts.2 )
api.districts.2
api.districts.2.list <- lapply( split(api.districts, api.districts$CDS),
function(x){
ifelse( dim(x)[1]==1, rep(NA, dim(x)[2]) , x)
})
api.districts.2.list[[1]]
split(api.districts, api.districts$CDS)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(cache=TRUE)
#install.packages( 'tidyverse' )
#install.packages( 'gee' )
#install.packages( 'survey' )
#install.packages( 'geepack' )
library( tidyverse, quietly=T, warn.conflicts = F )
library( gee, quietly=T, warn.conflicts = F )
library( geepack, quietly=T, warn.conflicts = F )
library( survey, quietly=T, warn.conflicts = F  )
data(ohio)
housing <- read.csv( "house_edu.csv", header=T )
housing <- housing[,-1]
api <- read.csv( "CaliAPIscore_master.csv", header=T )
api <- api[,-1]
api.valid <- api[!(is.na(api$VALID)),]
api.districts <- api.valid[which( api.valid$RTYPE == "D" ),]
#####   ifelse1() : Helper function that allows for
#####                           returning a multivariate response
#####                           based upon a univariate logical comparison
ifelse1 <- function (test, yes, no){
if (test) yes
else no
}
### function that allows us to get confidence intervals on binary longitudinal glms ###
## also lets us implement a robust variance fix-em-up ##
glmCI.long <- function (model, transform = TRUE, robust = FALSE) {
link <- model$family$link
coef <- summary(model)$coef[, 1]
se <- ifelse1(robust, summary(model)$coef[,4], summary(model)$coef[,
2])
zvalue <- coef/se
pvalue <- 2 * (1 - pnorm(abs(zvalue)))
if (transform & is.element(link, c("logit", "log"))) {
ci95.lo <- exp(coef - qnorm(0.975) * se)
ci95.hi <- exp(coef + qnorm(0.975) * se)
est <- exp(coef)
}
else {
ci95.lo <- coef - qnorm(0.975) * se
ci95.hi <- coef + qnorm(0.975) * se
est <- coef
}
rslt <- round(cbind(est, ci95.lo, ci95.hi, zvalue, pvalue),
4)
colnames(rslt) <- ifelse1(robust, c("Est", "robust ci95.lo",
"robust ci95.hi", "robust z value", "robust Pr(>|z|)"),
c("Est", "ci95.lo", "ci95.hi", "z value", "Pr(>|z|)"))
colnames(rslt)[1] <- ifelse(transform & is.element(link,
c("logit", "log")), "exp( Est )", "Est")
rslt
}
obs1 <- table(api.districts$CDS)
ob1
obs1
table(api.districts$CDS)==1
obs1[obs1==1]
names(obs1[obs1==1])
is.numeric(api.districts$CDS)
as.numeric(names(obs1[obs1==1]))
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(api.districts$CDS != obs1.ids),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS","API","year")] )
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[!(which(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS","API","year")] )
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[!(which(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp)
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
api.grp.lm
obs1.ids
api.districts[which(api.districts$CDS %in% obs1.ids),"CDS"]
api.districts[which(api.districts$CDS %in% obs1.ids),"API"]
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.districts.2 <- api.districts[!(which(api.districts$CDS %in% obs1.ids)),]
api.grp <- groupedData( API ~ year | CDS,
data=api.districts.2 )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp)
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
api.districts.2
api.districts.2 <- api.districts[which(api.districts$CDS %in% obs1.ids),]
api.districts.2
api.districts.2 <- api.districts[which(api.districts$CDS == obs1.ids),]
api.districts.2 <- api.districts[!(which(api.districts$CDS %in% obs1.ids)),]
api.districts.2
dim(api.districts)
length(which(api.districts$CDS %in% obs1.ids))
length(!(which(api.districts$CDS %in% obs1.ids)))
length(which(!(api.districts$CDS %in% obs1.ids)))
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp)
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( round( min(forest.matrix[,2]), digits=-2 ), round( max(forest.matrix[,4]), digits=-2 ) ), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
min(forest.matrix[,2])
round(min(forest.matrix[,2]))
min(as.numeric(forest.matrix[,2]))
as.numeric(min(forest.matrix[,2]))
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( round( as.numeric(min(forest.matrix[,2])), digits=-2 ), round( as.numeric(max(forest.matrix[,4])), digits=-2 ) ), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
max(forest.matrix[,4])
api.grp.lm
min(forest.matrix[,2])
max(forest.matrix[,4])
range(forest.matrix[,4])
summary(forest.matrix[,4])
summary(as.numeric(forest.matrix[,4]))
max(forest.matrix[,4], na.rm=T)
max(as.numeric(forest.matrix[,4]), na.rm=T)
min(forest.matrix[,5])
max(forest.matrix[,5])
max(forest.matrix[,7])
max(as.numeric(forest.matrix[,7]), na.rm=T)
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -11000, 11000), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,2:4], rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -10, 75 ), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of California API Scores",
outer=TRUE,line=-2, cex=0.9)
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -15000, 15000), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,2:4], rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -10, 75 ), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of California API Scores",
outer=TRUE,line=-2, cex=0.9)
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -25000, 25000), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,2:4], rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -25, 75 ), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of California API Scores",
outer=TRUE,line=-2, cex=0.9)
intervals(api.grp.lm)
min(intervals(api.grp.lm)[1:len])
min(intervals(api.grp.lm)[1:len], na.rm=T)
min(as.numeric(forest.matrix[,2]), na.rm=T)
max(as.numeric(forest.matrix[,4]), na.rm=T)
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(api.grp.lm)#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -25000, 25000), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( as.numeric(forest.matrix[j,2:4]), rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -25, 75 ), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of California API Scores",
outer=TRUE,line=-2, cex=0.9)
?rm.na
?na.rm
?na.omit
is.na(forest.matrix)
sum(is.na(forest.matrix))
sum(is.null(forest.matrix))
?is.nan
sum(is.nan(forest.matrix))
sum(is.finite(forest.matrix))
sum(is.nan(forest.matrix[,2]))
sum(is.nan(forest.matrix[,4]))
min(forest.matrix[,2])
max(forest.matrix[,2])
sum(is.na(as.numeric(forest.matrix))
)
sum(is.nan(as.numeric(forest.matrix)))
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- as.numeric(names(api.grp.lm))#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
forest.matrix <- na.omit(forest.matrix)
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -25000, 25000), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( as.numeric(forest.matrix[j,2:4]), rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -25, 75 ), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of California API Scores",
outer=TRUE,line=-2, cex=0.9)
min(forest.matrix[,2])
max(forest.matrix[,2])
min(forest.matrix[,5])
max(forest.matrix[,7])
obs1 <- table(api.districts$CDS)
obs1.ids <- as.numeric(names(obs1[obs1==1]))
api.grp <- groupedData( API ~ year | CDS,
data=api.districts[which(!(api.districts$CDS %in% obs1.ids)),] )
api.grp.lm <- lmList( API ~ year | CDS,
data=api.grp[,c("CDS", "API","year")])
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(api.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- as.numeric(names(api.grp.lm))#district names
forest.matrix[,2] <- intervals(api.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(api.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(api.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(api.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(api.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(api.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -120000, 120000), xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( as.numeric(forest.matrix[j,2:4]), rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c( -50, 75 ), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of California API Scores",
outer=TRUE,line=-2, cex=0.9)
housing.grp <- groupedData( Median ~ yrsSince2009 | countyID,
data=housing )
housing.grp.lm <- lmList( Median ~ yrsSince2009 | countyID,
data=housing.grp )
## creating forest plots of the intercepts & slopes of all the regressions ##
len <- length(housing.grp.lm)
forest.matrix <- matrix(NA, nrow = len, ncol = 7)
forest.matrix[,1] <- names(housing.grp.lm)#county names
forest.matrix[,2] <- intervals(housing.grp.lm)[1:len]#lower int
forest.matrix[,3] <- intervals(housing.grp.lm)[(len+1):(2*len)]#est. int
forest.matrix[,4] <- intervals(housing.grp.lm)[(2*len + 1):(3*len)]#upper int
forest.matrix[,5] <- intervals(housing.grp.lm)[(3*len + 1):(4*len)]#lower sope
forest.matrix[,6] <- intervals(housing.grp.lm)[(4*len + 1):(5*len)]#est. slope
forest.matrix[,7] <- intervals(housing.grp.lm)[(5*len + 1):(6*len)]#upper slope
par(mfrow = c(1,2))
plot( forest.matrix[1,2:4], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c(70000,210000),xlab = "Intercept",
ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,2:4], rep(j, 3) )
}
plot( forest.matrix[1,5:7], rep(1, 3), type = "l", ylim = c(1, len),
xlim=c(-200,12000), xlab = "Slope", ylab= "Order of Intercept",
cex.lab=0.8, cex.axis=0.7)
for( j in 1:length(unique(forest.matrix[,1]))){
lines( forest.matrix[j,5:7], rep(j, 3) )
}
mtext("Random Intercepts & Slopes of Texas Median Home Values",
outer=TRUE,line=-2, cex=0.9)
ohio.exch <- gee( resp ~ age + smoke,
id = id,
data = ohio,
family=binomial(link='logit'),
corstr="exchangeable",
silent = T )
glmCI.long( ohio.exch, robust = T )
## AR-1 correlation structure ##
ohio.ar1 <- gee( resp ~ age + smoke,
id = id,
data = ohio,
family=binomial(link='logit'),
corstr="AR-M",
Mv = 1,
silent = T )
glmCI.long( ohio.ar1, robust = T )
lm(resp ~ age + smoke, data=ohio)
summary( lm(Median ~ BApctTotPop18plus + yrsSince2009, data = housing ) )$coef
?ohio
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(cache=TRUE)
install.packages( 'gridExtra' )
library( gridExtra, quietly=T, warn.conflicts = F )
