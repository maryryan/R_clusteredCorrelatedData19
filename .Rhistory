library( tidyverse, quietly=T )
library( nlme, quietly=T )
library( lme4, quietly=T )
library( survey )
#### LOAD DATA ####
## example 1 ##
# original data from: https://www.ics.uci.edu/~dgillen/STAT211/data.html #
chd <- read.csv( "chddata.csv", header=T )
colnames(chd)
head(chd)
chd <- chd[,-1]
library( gee, quietly=T, warn.conflicts = F )
length(unique(chd$idno))
dim(chd)
install.packages( 'blid' )
install.packages( 'blid', dependencies=TRUE, repos='http://cran.rstudio.com/' )
install.packages( 'blid', dependencies=TRUE, repos='https://cran.r-project.org/web/packages/bild/' )
install.packages( 'blid', dependencies=TRUE, repos='https://CRAN.R-project.org/package=bild' )
install.packages( 'blid', dependencies=TRUE, repos='http://CRAN.R-project.org/package=bild' )
data(ohio)
install.packages('Rdatasets')
library( tidyverse, quietly=T, warn.conflicts = F )
install.packages( 'geepack' )
data(ohio)
library(geepack)
data(ohio)
head(ohio)
length(unique(ohio$id))
dim(ohio)
range(ohio$age)
table(table(ohio$id))
table(ohio$id)
table(table(ohio$age))
## re-define age ##
# originally, age = 0 indicates 9yo #
ohio$ageYrs <- ohio$age + 10
head(ohio)
## re-define age ##
# originally, age = 0 indicates 9yo #
ohio$ageYrs <- ohio$age + 9
head(ohio)
?ohio
vignette(ohio)
#### EXAMPLE 1:  ####
ohio.indep <- gee( resp ~ age + smoke,
id = id,
data = ohio,
family=binomial(link='logit'),
corstr="independence" )
summary( ohio.indep )$coef
#### FUNCTIONS WE NEED ####
### function that allows us to get confidence intervals on longitudinal glms ###
## also lets us implement a robust variance fix-em-up ##
glmCI.long <- function (model, transform = TRUE, robust = FALSE) {
link <- model$family$link
coef <- summary(model)$coef[, 1]
se <- ifelse1(robust, summary(model)$coef[,4], summary(model)$coef[,
2])
zvalue <- coef/se
pvalue <- 2 * (1 - pnorm(abs(zvalue)))
if (transform & is.element(link, c("logit", "log"))) {
ci95.lo <- exp(coef - qnorm(0.975) * se)
ci95.hi <- exp(coef + qnorm(0.975) * se)
est <- exp(coef)
}
else {
ci95.lo <- coef - qnorm(0.975) * se
ci95.hi <- coef + qnorm(0.975) * se
est <- coef
}
rslt <- round(cbind(est, ci95.lo, ci95.hi, zvalue, pvalue),
4)
colnames(rslt) <- ifelse1(robust, c("Est", "robust ci95.lo",
"robust ci95.hi", "robust z value", "robust Pr(>|z|)"),
c("Est", "ci95.lo", "ci95.hi", "z value", "Pr(>|z|)"))
colnames(rslt)[1] <- ifelse(transform & is.element(link,
c("logit", "log")), "exp( Est )", "Est")
rslt
}
glmCI.long( ohio.indep )
?ohio
knitr::opts_chunk$set(echo = FALSE)
?ohio
length(unique(ohio$id))
dim(ohio)
dim(housing)
### example 2 ###
# original data obtained from American Community Survey: Table S2506 #
# for data cleaning, see https://github.com/maryryan/R_MLandDataModels/blob/master/R_MLandDataModels_housingAndEduDataSetCleaning.R #
housing <- read.csv( "house_edu.csv", header=T )
colnames(housing)
api <- read.csv( "CaliAPIscore_master.csv", header=T )
api <- api[,-1]
colnames(api)
head(api)
length(which(api$RTYPE=="D"))
## restrict to school districts ##
api.districts <- api[which( api$RTYPE == "D" ),]
dim(api.districts)
range(api$year)
length(unique(api.districts$CDS))
length(unique(housing$countyID))
dim(housing)
range(housing$year)
?case_when
is.character(api$CHARTER)
unique(api$CHARTER)
x <_ 1:50
x <- 1:50
case_when( x %% 35 == 0 ~ "fizz")
case_when( x == 0 ~ "fizz")
case_when( x == 6 ~ "fizz")
#################
###################### Cleaning 2002-2012 California API Data
###################### R: Models for Clustered
###################### and Correlated Data
###################### NICAR 2019
###################### INSTRUCTOR: Mary Ryan
###################### CREATED 12.1.2018
###################### UPDATED 12.2.2018
##################
#### LOAD PACKAGES ####
#install.packages( 'tidyverse' )
#install.packages( 'readr' )
library( tidyverse, quietly=T )
library( readr )
#### LOAD ORIGINAL DATA FILES ####
recordLayout6 <- read.csv( "originalData_clusteredCorrelatedData19/CaliAPIscore_recordLayout2006.csv", header = F )
recordLayout6 <- recordLayout6[,-1]
recordLayout7 <- read.csv( "originalData_clusteredCorrelatedData19/CaliAPIscore_recordLayout2007.csv", header = F )
recordLayout7 <- recordLayout7[,-1]
recordLayout8 <- read.csv( "originalData_clusteredCorrelatedData19/CaliAPIscore_recordLayout2008.csv", header = F )
recordLayout8 <- recordLayout8[,-1]
recordLayout9 <- read.csv( "originalData_clusteredCorrelatedData19/CaliAPIscore_recordLayout2009.csv", header = F )
recordLayout9 <- recordLayout9[,-1]
recordLayout10 <- read.csv( "originalData_clusteredCorrelatedData19/CaliAPIscore_recordLayout2010.csv", header = F )
recordLayout10 <- recordLayout10[,-1]
recordLayout12 <- read.csv( "originalData_clusteredCorrelatedData19/CaliAPIscore_recordLayout2012.csv", header = F )
recordLayout12 <- recordLayout12[,-1]
colnames(recordLayout6) <-colnames(recordLayout7) <-colnames(recordLayout8) <-colnames(recordLayout9) <-colnames(recordLayout10) <-colnames(recordLayout12) <- c("colName", "dataType", "width", "description")
## files downloaded from 'https://www.cde.ca.gov/ta/ac/ap/apidatafiles.asp' ##
api6 <- read_fwf( file = "originalData_clusteredCorrelatedData19/api06btx.txt",
fwf_widths( recordLayout6$width ),
cols( .default=col_character() )  )
colnames(api6) <- recordLayout6$colName
api7 <- read_fwf( file = "originalData_clusteredCorrelatedData19/api07btx.txt",
fwf_widths( recordLayout7$width ),
cols( .default=col_character() )  )
colnames(api7) <- recordLayout7$colName
api8 <- read_fwf( file = "originalData_clusteredCorrelatedData19/api08btx.txt",
fwf_widths( recordLayout8$width ),
cols( .default=col_character() )  )
colnames(api8) <- recordLayout8$colName
api9 <- read_fwf( file = "originalData_clusteredCorrelatedData19/api09btx.txt",
fwf_widths( recordLayout9$width ),
cols( .default=col_character() )  )
colnames(api9) <- recordLayout9$colName
api10 <- read_fwf( file = "originalData_clusteredCorrelatedData19/api10btx.txt",
fwf_widths( recordLayout10$width ),
cols( .default=col_character() ) )
colnames(api10) <- recordLayout10$colName
api11 <- read_fwf( file = "originalData_clusteredCorrelatedData19/api11btx.txt",
fwf_widths( recordLayout12$width ),
cols( .default=col_character() )  )
colnames(api11) <- recordLayout12$colName
colnames(api11)[12] <- "API11B"
api12 <- read_fwf( file = "originalData_clusteredCorrelatedData19/apib12tx.txt",
fwf_widths( recordLayout12$width ),
cols( .default=col_character() )  )
colnames(api12) <- recordLayout12$colName
#### FORMAT FILES INTO ONE LARGE FILE ####
colsWant6 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API06B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api6.trunc <- api6[,colsWant6]
api6.trunc$year <- rep(2006, nrow(api6.trunc))
colnames(api6.trunc)[10] <- "API"
colsWant7 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API07B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api7.trunc <- api7[,colsWant7]
api7.trunc$year <- rep(2007, nrow(api7.trunc))
colnames(api7.trunc)[10] <- "API"
colsWant8 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API08B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api8.trunc <- api8[,colsWant8]
api8.trunc$year <- rep(2008, nrow(api8.trunc))
colnames(api8.trunc)[10] <- "API"
colsWant9 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API09B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api9.trunc <- api9[,colsWant9]
api9.trunc$year <- rep(2009, nrow(api9.trunc))
colnames(api9.trunc)[10] <- "API"
colsWant10 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API10B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api10.trunc <- api10[,colsWant10]
api10.trunc$year <- rep(2010, nrow(api10.trunc))
colnames(api10.trunc)[10] <- "API"
colsWant11 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API11B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api11.trunc <- api11[,colsWant11]
api11.trunc$year <- rep(2011, nrow(api11.trunc))
colnames(api11.trunc)[10] <- "API"
colsWant12 <- c("CDS", "RTYPE", "STYPE","SPED","CHARTER","SNAME","DNAME","CNAME",
"VALID","API12B",
"AA_NUM", "AI_NUM","AS_NUM","FI_NUM","HI_NUM","PI_NUM","WH_NUM","SD_NUM",
"EL_NUM","DI_NUM","PCT_AA","PCT_AI","PCT_AS","PCT_FI","PCT_HI","PCT_WH",
"MEALS","P_EL","P_DI")
api12.trunc <- api12[,colsWant12]
api12.trunc$year <- rep(2012, nrow(api12.trunc))
colnames(api12.trunc)[10] <- "API"
apiMaster <- list(api6.trunc, api7.trunc, api8.trunc, api9.trunc,
api10.trunc, api11.trunc, api12.trunc) %>%
reduce(full_join, by = c(colsWant12[c(1:9,11:29)], "API","year")
)
## change CHARTER variable so it's factor levels ##
apiMaster$CHARTER <- ifelse( is.na(apiMaster$CHARTER), 0, apiMaster$CHARTER )
apiMaster$CHARTER_fact <- case_when(
apiMaster$CHARTER == "Y" ~ 1,
apiMaster$CHARTER == "D" ~ 2 )
unqiue(apiMaster$CHARTER_fact)
unique(apiMaster$CHARTER_fact)
unique(apiMaster$CHARTER)
apiMaster$CHARTER_fact <- case_when(
apiMaster$CHARTER == "Y" ~ 1,
apiMaster$CHARTER == "D" ~ 2,
apiMaster$CHARTER == 0 ~ 0)
unique(apiMaster$CHARTER_fact)
#### WRITE OUT FILE ####
write.csv(apiMaster, "CaliAPIscore_master.csv")
### example 3 ###
# original data downloaded from: https://www.cde.ca.gov/ta/ac/ap/apidatafiles.asp #
# for data cleaning, see https://github.com/maryryan/R_clusteredCorrelatedData19/blob/master/DATACLEANING_CaliAPIscores_06-12.R #
api <- read.csv( "CaliAPIscore_master.csv", header=T )
api <- api[,-1]
## restrict to school districts ##
api.districts <- api[which( api$RTYPE == "D" ),]
## create indicators for charter ##
api$charter_df <- ifelse( api$CHARTER_fact == 2, 1, 0 )
api$charter_ndf <- ifelse( api$CHARTER_fact == 1, 1, 0 )
## restrict to school districts ##
api.districts <- api[which( api$RTYPE == "D" ),]
colnames(housing)
range(housing$pop18_24)
range(housing$BA18_24Count)
colnames(api)
